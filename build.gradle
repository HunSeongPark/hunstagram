plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
	id 'jacoco'
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.8'
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, // 리포트 결과에 제외시킬 디렉토리
					excludes: [
							"**/*Application*",
							"**/*Config*",
							"**/*Dto*",
							"**/*Request*",
							"**/*Response*",
							"**/*Exception*",
							"**/*Error*"
					])
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}

		rule {
			enabled = true

			// 룰을 체크할 단위는 클래스 단위
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 150
			}

			excludes = [
					"**/*Application*",
					"**/*Config*",
					"**/*Dto*",
					"**/*Request*",
					"**/*Response*",
					"**/*Exception*",
					"**/*Error*"
			]
		}
	}
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

task testCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	useJUnitPlatform()
//	finalizedBy 'jacocoTestReport'
}
